package main

import (
	"fmt"
	"io/ioutil"
	"log"

	"github.com/KusionStack/kusionup/pkg/version"
)

func main() {
	versionInfo, err := version.NewVersionInfo()
	if err != nil {
		log.Fatal(err)
	}

	data := make_update_version_go_file(versionInfo)

	err = ioutil.WriteFile("../z_update_version.go", []byte(data), 0o666)
	if err != nil {
		log.Fatalf("ioutil.WriteFile: err = %v", err)
	}

	fmt.Println(versionInfo.String())
}

func make_update_version_go_file(v *version.VersionInfo) string {
	return fmt.Sprintf(`// Auto generated by 'go run gen.go', DO NOT EDIT.

package version

func init() {
	versionInfo = &VersionInfo{
		ReleaseVersion: %q,
		GitVersion:     %q,
		GitCommit:      %q,
		GitTreeState:   %q,
		BuildTime:      %q,
		Runtime: RuntimeInfo{
			GoVersion: %q,
			GOOS:      %q,
			GOARCH:    %q,
			NumCPU:    %d,
			Compiler:  %q,
		},
	}
}
`,
		v.ReleaseVersion,
		v.GitVersion,
		v.GitCommit,
		v.GitTreeState,
		v.BuildTime,
		v.Runtime.GoVersion,
		v.Runtime.GOOS,
		v.Runtime.GOARCH,
		v.Runtime.NumCPU,
		v.Runtime.Compiler,
	)
}
